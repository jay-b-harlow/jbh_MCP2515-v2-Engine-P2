  {Object_Title_and_Purpose}
  DEBUG_LOG_SIZE = 65536
  'debug_main = true
  DEBUG_TIMESTAMP

CON
   _clkfreq = 180_000_000
   _stack = 1024

  CMD_READ        = %0000_0011
  REG_CANCTRL     = %0000_1111

OBJ
  spi: "jbh_sd_experimental"
  sw:   "stopwatch"

CON
  IO    = 0

  pinCAN_SDA    = IO + 0 ' SDA
  pinCAN_SCL    = IO + 1 ' SCL
  pinCAN_Tx     = IO + 2 ' TX
  pinCAN_Rx     = IO + 3 ' RX
  pinCAN_INT    = IO + 4 ' INT
  pinCAN_PWM    = IO + 5 ' PWM
  pinCAN_AN     = IO + 6 ' AN
  pinCAN_RESET  = IO + 7  ' RST

  pinCAN_CS     = IO + 8  ' CS
  pinSPI_Clk    = IO + 9  ' SCK
  pinSPI_MISO   = IO + 10 ' MISO
  pinSPI_MOSI   = IO + 11 ' MOSI

 TSB_LENGTH = $D

VAR
  byte  referenceTSB[TSB_LENGTH]
  byte  TSB[TSB_LENGTH]
  long  stack1[6]

PUB Main()
  sw.Reset()
  spi.start(pinSPI_MISO, pinSPI_MOSI, pinSPI_Clk, 10_000)

  'cogspin(NEWCOG, Collector(), @stack1)

  PopulateBuffer(@TSB, TSB_LENGTH)

  pinh(pinCAN_INT)
  pinh(pinCAN_RESET)
  pinh(pinCAN_CS)

  debug("shiftcmd      ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))
  sw.reset()
  spi.shiftcmd((CMD_READ << 8) | (REG_CANCTRL & $7F), 16)
  sw.elapsed(@"shiftcmd")
  debug("shiftcmd      ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))

  debug("pre-shiftin   ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))
  sw.reset()
  spi.shiftin(@TSB, TSB_LENGTH)
  sw.elapsed(@"shiftin")
  spi.shiftin(@TSB, TSB_LENGTH)
  sw.elapsed(@"shiftin")
  debug("post-shiftin  ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))

  'debug("pre-shiftout  ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))
  'sw.reset()
  'spi.shiftout(@TSB, TSB_LENGTH)
  'sw.elapsed(@"shiftin")
  'debug("post-shiftout ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))

  'debug("pre-shiftio   ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))
  'sw.reset()
  'spi.shiftio(@TSB, TSB_LENGTH)
  'sw.elapsed(@"shiftio")
  'debug("post-shiftio  ", UHEX_BYTE_ARRAY(@TSB, TSB_LENGTH))


  pinl(pinCAN_CS)
  debug("done...")
  'repeat

PUB PopulateBuffer(pDataBffr, nRegCount) | index
  index := 0
  repeat nRegCount

    byte[pDataBffr][index] := ++index 'getrnd()


PUB Collector() | cs, clk, sdo, sdi, index

  debug(`LOGIC MyLogic TITLE 'CANBUS I/O' SAMPLES 256 'Index' 1 gray 'CLK' 1 ORANGE 'CS' 1 MAGENTA 'SDO' 1 RED 'SDI' 1 BLUE)
  repeat
    index += 1
    CLK := pinr(pinSPI_Clk)
    CS :=  pinr(pinCAN_CS)
    SDO := pinr(pinSPI_MISO)
    SDI := pinr(pinSPI_MOSI)
    if (clk | cs | sdo | sdi)
      debug(`MyLogic `udec_(index, CLK, CS, SDO, SDI))

  cogstop(CogId())

con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}